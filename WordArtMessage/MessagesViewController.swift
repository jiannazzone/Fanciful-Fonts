//
//  MessagesViewController.swift
//  WordArtMessage
//
//  Created by Joseph Adam Iannazzone on 3/8/23.
//

import UIKit
import SwiftUI
import Messages

@objc(MessagesViewController)

class MessagesViewController: MSMessagesAppViewController {
    
    let outputModel = FancyTextModel(false)
    var thisConversation = MSMessage()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let detailViewController = UIHostingController(
            rootView: ContentView(outputModel: outputModel)
        )
        
        self.addChild(detailViewController)
        view.addSubview(detailViewController.view)
        detailViewController.view.frame = view.bounds
        detailViewController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        detailViewController.didMove(toParent: self)
        
        outputModel.expand = {
            self.requestPresentationStyle(.expanded)
        }
        
        outputModel.insert = {
            self.activeConversation?.insertText(self.outputModel.finalOutput)
            self.dismiss()
        }
        
        outputModel.dismiss = {
            self.dismiss()
        }
        
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        thisConversation = conversation.selectedMessage ?? MSMessage()
        print(thisConversation)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        dismiss()
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        
        if presentationStyle == .expanded {
            outputModel.isExpanded = false
        } else {
            outputModel.isExpanded = true
        }
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.

        // Use this method to finalize any behaviors associated with the change in presentation style.
        if presentationStyle == .expanded {
            outputModel.isExpanded = true
        } else {
            outputModel.isExpanded = false
        }
    }

}
